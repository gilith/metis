###############################################################################
# METIS DEVELOPMENT MAKEFILE
# Copyright (c) 2001-2007 Joe Hurd, distributed under the GNU GPL version 2
###############################################################################

###############################################################################
# Cleaning temporary files.
###############################################################################

TEMPFILE = Makefile-temp-file

TEMP += $(TEMPFILE) \
        benchmark* mlmon.out \
        cnf.tptp saturated.tptp

###############################################################################
# Debugging options.
###############################################################################

#MLPP_OPTS += -r 'DEBUG'
#MLPP_OPTS += -r 'DEBUG|TRACE[0-1]'
#MLPP_OPTS += -r 'DEBUG|TRACE[0-2]'
#MLPP_OPTS += -r 'DEBUG|TRACE[0-3]'
#MLPP_OPTS += -r 'DEBUG|TRACE[0-4]'
#MLPP_OPTS += -r 'DEBUG|TRACE[0-5]'
#MLPP_OPTS += -r 'DEBUG|TRACE[0-6]'

#MLTONC_OPTS += -const 'Exn.keepHistory true'

###############################################################################
# Automatically generated dependencies.
###############################################################################

MOSML_DEP = scripts/mosml_dep

bin/mosml/Makefile.src: Makefile Makefile.dev $(MOSML_DEP) $(MLPP)
	@echo
	@echo '****************************************************'
	@echo '* Regenerating the Moscow ML makefile dependencies *'
	@echo '****************************************************'
	@echo
	@$(MOSML_DEP) $(MOSML_SRC) $(MOSML_TARGETS) > $@

###############################################################################
# Moving source files around.
###############################################################################

src/ElementSet.sig: ../basic/src/ElementSet.sig $(COPY) ; @$(COPY) $< $@
src/ElementSet.sml: ../basic/src/ElementSet.sml $(COPY) ; @$(COPY) $< $@
src/Heap.sig: ../basic/src/Heap.sig $(COPY) ; @$(COPY) $< $@
src/Heap.sml: ../basic/src/Heap.sml $(COPY) ; @$(COPY) $< $@
src/KeyMap.sig: ../basic/src/KeyMap.sig $(COPY) ; @$(COPY) $< $@
src/KeyMap.sml: ../basic/src/KeyMap.sml $(COPY) ; @$(COPY) $< $@
src/Lazy.sig: ../basic/src/Lazy.sig $(COPY) ; @$(COPY) $< $@
src/Lazy.sml: ../basic/src/Lazy.sml $(COPY) ; @$(COPY) $< $@
src/Map.sig: ../basic/src/Map.sig $(COPY) ; @$(COPY) $< $@
src/Map.sml: ../basic/src/Map.sml $(COPY) ; @$(COPY) $< $@
src/Options.sig: ../basic/src/Options.sig $(COPY) ; @$(COPY) $< $@
src/Options.sml: ../basic/src/Options.sml $(COPY) ; @$(COPY) $< $@
src/Ordered.sig: ../basic/src/Ordered.sig $(COPY) ; @$(COPY) $< $@
src/Ordered.sml: ../basic/src/Ordered.sml $(COPY) ; @$(COPY) $< $@
src/Parser.sig: ../basic/src/Parser.sig $(COPY) ; @$(COPY) $< $@
src/Parser.sml: ../basic/src/Parser.sml $(COPY) ; @$(COPY) $< $@
src/Portable.sig: ../basic/src/Portable.sig $(COPY) ; @$(COPY) $< $@
src/PortableMosml.sml: ../basic/src/PortableMosml.sml $(COPY) ; @$(COPY) $< $@
src/PortableMlton.sml: ../basic/src/PortableMlton.sml $(COPY) ; @$(COPY) $< $@
src/PP.sig: ../basic/src/PP.sig $(COPY) ; @$(COPY) $< $@
src/PP.sml: ../basic/src/PP.sml $(COPY) ; @$(COPY) $< $@
src/Random.sig: ../basic/src/Random.sig $(COPY) ; @$(COPY) $< $@
src/Random.sml: ../basic/src/Random.sml $(COPY) ; @$(COPY) $< $@
src/RandomMap.sml: ../basic/src/RandomMap.sml $(COPY) ; @$(COPY) $< $@
src/RandomSet.sml: ../basic/src/RandomSet.sml $(COPY) ; @$(COPY) $< $@
src/Set.sig: ../basic/src/Set.sig $(COPY) ; @$(COPY) $< $@
src/Set.sml: ../basic/src/Set.sml $(COPY) ; @$(COPY) $< $@
src/Sharing.sig: ../basic/src/Sharing.sig $(COPY) ; @$(COPY) $< $@
src/Sharing.sml: ../basic/src/Sharing.sml $(COPY) ; @$(COPY) $< $@
src/Stream.sig: ../basic/src/Stream.sig $(COPY) ; @$(COPY) $< $@
src/Stream.sml: ../basic/src/Stream.sml $(COPY) ; @$(COPY) $< $@
src/Useful.sig: ../basic/src/Useful.sig $(COPY) ; @$(COPY) $< $@
src/Useful.sml: ../basic/src/Useful.sml $(COPY) ; @$(COPY) $< $@

src/selftest.sml: test/test.sml $(COPY) ; @$(COPY) $< $@

###############################################################################
# Counting the number of lines of code.
###############################################################################

LINES = scripts/ml_lines

.PHONY: lines
lines: $(LINES)
	@echo
	@echo -n 'Metis '
	@$(LINES) $(SRC) src/metis.sml
	@echo

###############################################################################
# Generating the problem sets.
###############################################################################

PROBLEM_DIR = data/problems
TPTP_PROBLEM_DIR = $(HOME)/ptr/tptp/tptp
PROBLEMS2TPTP = bin/mosml/problems2tptp
COPY_PROBLEM = scripts/copy_problem
ALL_SET = $(PROBLEM_DIR)/all
INSTANT_SET = $(PROBLEM_DIR)/instant
NONEQUALITY_SET = $(PROBLEM_DIR)/nonequality
EQUALITY_SET = $(PROBLEM_DIR)/equality
TPTP_SET = $(PROBLEM_DIR)/tptp
HOL_SET = $(PROBLEM_DIR)/hol
BENCHMARK_SET = $(PROBLEM_DIR)/benchmark
MLTON_BENCHMARK_SET = $(PROBLEM_DIR)/mlton-benchmark-20020924
SATISFIABLE_SET = $(PROBLEM_DIR)/satisfiable
TPTP_CNF_SET = $(PROBLEM_DIR)/tptp-cnf
TPTP_FOF_SET = $(PROBLEM_DIR)/tptp-fof

.PHONY: problems
problems: $(PROBLEMS2TPTP)
	if test -d $(PROBLEM_DIR) ; then rm -r $(PROBLEM_DIR)/ ; fi ; mkdir $(PROBLEM_DIR)
	mkdir $(ALL_SET)
	$(PROBLEMS2TPTP) --output-dir $(ALL_SET)
	@cp $(TPTP_PROBLEM_DIR)/BOO/BOO021-1.tptp $(ALL_SET)
	@cp $(TPTP_PROBLEM_DIR)/COL/COL058-2.tptp $(ALL_SET)
	@cp $(TPTP_PROBLEM_DIR)/COL/COL060-3.tptp $(ALL_SET)
	@cp $(TPTP_PROBLEM_DIR)/LCL/LCL009-1.tptp $(ALL_SET)
	@cp $(TPTP_PROBLEM_DIR)/LCL/LCL107-1.tptp $(ALL_SET)
	@cp $(TPTP_PROBLEM_DIR)/PUZ/PUZ001-1.tptp $(ALL_SET)
	@cp $(TPTP_PROBLEM_DIR)/SYN/SYN075-1.tptp $(ALL_SET)
	@cp $(TPTP_PROBLEM_DIR)/SYN/SYN075+1.tptp $(ALL_SET)
	mkdir $(NONEQUALITY_SET)
	for p in `$(PROBLEMS2TPTP) --collection nonequality --list` ; do $(COPY_PROBLEM) $(ALL_SET)/$$p.tptp $(NONEQUALITY_SET) ; done
	mkdir $(EQUALITY_SET)
	for p in `$(PROBLEMS2TPTP) --collection equality --list` ; do $(COPY_PROBLEM) $(ALL_SET)/$$p.tptp $(EQUALITY_SET) ; done
	mkdir $(TPTP_SET)
	for p in `$(PROBLEMS2TPTP) --collection tptp --list` ; do $(COPY_PROBLEM) $(ALL_SET)/$$p.tptp $(TPTP_SET) ; done
	mkdir $(HOL_SET)
	for p in `$(PROBLEMS2TPTP) --collection hol --list` ; do $(COPY_PROBLEM) $(ALL_SET)/$$p.tptp $(HOL_SET) ; done
	mkdir $(INSTANT_SET)
	@$(COPY_PROBLEM) $(ALL_SET)/TRUE.tptp $(INSTANT_SET)
	@$(COPY_PROBLEM) $(ALL_SET)/SIMPLE.tptp $(INSTANT_SET)
	@$(COPY_PROBLEM) $(ALL_SET)/CYCLIC.tptp $(INSTANT_SET)
	@$(COPY_PROBLEM) $(ALL_SET)/MICHAEL_NORRISH_BUG.tptp $(INSTANT_SET)
	@$(COPY_PROBLEM) $(ALL_SET)/PROP_6.tptp $(INSTANT_SET)
	@$(COPY_PROBLEM) $(ALL_SET)/MATHS4_EXAMPLE.tptp $(INSTANT_SET)
	@$(COPY_PROBLEM) $(ALL_SET)/P18.tptp $(INSTANT_SET)
	@$(COPY_PROBLEM) $(ALL_SET)/P39.tptp $(INSTANT_SET)
	@$(COPY_PROBLEM) $(ALL_SET)/P59.tptp $(INSTANT_SET)
	@$(COPY_PROBLEM) $(ALL_SET)/BAD_CONNECTIONS.tptp $(INSTANT_SET)
	@$(COPY_PROBLEM) $(ALL_SET)/TRANS_SYMM.tptp $(INSTANT_SET)
	@$(COPY_PROBLEM) $(ALL_SET)/CYCLIC_SUBSTITUTION_BUG.tptp $(INSTANT_SET)
	@$(COPY_PROBLEM) $(ALL_SET)/P48.tptp $(INSTANT_SET)
	mkdir $(BENCHMARK_SET)
	@$(COPY_PROBLEM) $(ALL_SET)/LOS.tptp $(BENCHMARK_SET)
	@$(COPY_PROBLEM) $(ALL_SET)/STEAM_ROLLER.tptp $(BENCHMARK_SET)
	@$(COPY_PROBLEM) $(ALL_SET)/GILMORE_9.tptp $(BENCHMARK_SET)
	@$(COPY_PROBLEM) $(ALL_SET)/AGATHA.tptp $(BENCHMARK_SET)
	@$(COPY_PROBLEM) $(ALL_SET)/JACOBSON_2.tptp $(BENCHMARK_SET)
	@$(COPY_PROBLEM) $(ALL_SET)/WISHNU.tptp $(BENCHMARK_SET)
	mkdir $(MLTON_BENCHMARK_SET)
	@$(COPY_PROBLEM) $(ALL_SET)/P26.tptp $(MLTON_BENCHMARK_SET)
	@$(COPY_PROBLEM) $(ALL_SET)/P46.tptp $(MLTON_BENCHMARK_SET)
	@$(COPY_PROBLEM) $(ALL_SET)/GILMORE_1.tptp $(MLTON_BENCHMARK_SET)
	@$(COPY_PROBLEM) $(ALL_SET)/LOS.tptp $(MLTON_BENCHMARK_SET)
	@$(COPY_PROBLEM) $(ALL_SET)/STEAM_ROLLER.tptp $(MLTON_BENCHMARK_SET)
	@$(COPY_PROBLEM) $(ALL_SET)/P48.tptp $(MLTON_BENCHMARK_SET)
	@$(COPY_PROBLEM) $(ALL_SET)/P49.tptp $(MLTON_BENCHMARK_SET)
	@$(COPY_PROBLEM) $(ALL_SET)/AGATHA.tptp $(MLTON_BENCHMARK_SET)
	@$(COPY_PROBLEM) $(ALL_SET)/LCL009-1.tptp $(MLTON_BENCHMARK_SET)
	@$(COPY_PROBLEM) $(ALL_SET)/COL060-3.tptp $(MLTON_BENCHMARK_SET)
	@$(COPY_PROBLEM) $(ALL_SET)/COL058-2.tptp $(MLTON_BENCHMARK_SET)
	@$(COPY_PROBLEM) $(ALL_SET)/LCL107-1.tptp $(MLTON_BENCHMARK_SET)
	@$(COPY_PROBLEM) $(ALL_SET)/BOO021-1.tptp $(MLTON_BENCHMARK_SET)
	@$(COPY_PROBLEM) $(ALL_SET)/GRP128-4.003.tptp $(MLTON_BENCHMARK_SET)
	mkdir $(SATISFIABLE_SET)
	@$(COPY_PROBLEM) $(ALL_SET)/LOGICPROOF_1999.tptp $(SATISFIABLE_SET)
	@$(COPY_PROBLEM) $(ALL_SET)/GILMORE_2.tptp $(SATISFIABLE_SET)
	mkdir $(TPTP_CNF_SET)
	@tptp1T CNF Unsatisfiable Rating 0.0 0.0 | perl -n -e '$$l = $$_; chomp $$l; $$l =~ s/[[:space:]].*$$//; $$l =~ s/^([A-Z]*)/\1\/\1/; (system ("$(COPY_PROBLEM) -l $(TPTP_PROBLEM_DIR)/$$l.tptp $(TPTP_CNF_SET)") == 0) or die;'
	mkdir $(TPTP_FOF_SET)
	@tptp1T FOF Theorem Rating 0.0 0.0 | perl -n -e '$$l = $$_; chomp $$l; $$l =~ s/[[:space:]].*$$//; $$l =~ s/^([A-Z]*)/\1\/\1/; (system ("$(COPY_PROBLEM) -l $(TPTP_PROBLEM_DIR)/$$l.tptp $(TPTP_FOF_SET)") == 0) or die;'

###############################################################################
# Testing Metis on the problem sets.
###############################################################################

TEST_TIME_LIMIT = 60

.PHONY: status-test
status-test: $(METIS)
# Testing the TPTP parser
	@ulimit -t $(TEST_TIME_LIMIT) ; $(METIS) test/tptp/NUMBERED_FORMULAS.tptp | grep '^SZS status Theorem for'
	@ulimit -t $(TEST_TIME_LIMIT) ; $(METIS) test/tptp/DEFINED_TERMS.tptp | grep '^SZS status CounterSatisfiable for'
	@ulimit -t $(TEST_TIME_LIMIT) ; $(METIS) test/tptp/QUOTED_TERMS.tptp | grep '^SZS status Theorem for'
	@ulimit -t $(TEST_TIME_LIMIT) ; $(METIS) test/tptp/QUOTED_TERMS_IDENTITY.tptp | grep '^SZS status Theorem for'
	@ulimit -t $(TEST_TIME_LIMIT) ; $(METIS) test/tptp/QUOTED_TERMS_SPECIAL.tptp | grep '^SZS status CounterSatisfiable for'
# Testing the prover
	@ulimit -t $(TEST_TIME_LIMIT) ; $(METIS) $(TPTP_PROBLEM_DIR)/SYN/SYN075+1.tptp | grep '^SZS status Theorem for'
	@ulimit -t $(TEST_TIME_LIMIT) ; $(METIS) $(TPTP_PROBLEM_DIR)/MGT/MGT019+2.tptp | grep '^SZS status CounterSatisfiable for'
	@ulimit -t $(TEST_TIME_LIMIT) ; $(METIS) $(TPTP_PROBLEM_DIR)/KRS/KRS063+1.tptp | grep '^SZS status Unsatisfiable for'
	@ulimit -t $(TEST_TIME_LIMIT) ; $(METIS) $(TPTP_PROBLEM_DIR)/KRS/KRS018+1.tptp | grep '^SZS status Satisfiable for'
	@ulimit -t $(TEST_TIME_LIMIT) ; $(METIS) $(TPTP_PROBLEM_DIR)/SYN/SYN075-1.tptp | grep '^SZS status Unsatisfiable for'
# Unordered literal selection can't seem to detect this
#	@ulimit -t $(TEST_TIME_LIMIT) ; $(METIS) $(TPTP_PROBLEM_DIR)/MGT/MGT031-1.tptp | grep '^SZS status Satisfiable for'
	@ulimit -t $(TEST_TIME_LIMIT) ; $(METIS) $(TPTP_PROBLEM_DIR)/MGT/MGT041-2.tptp | grep '^SZS status Unsatisfiable for'
	@ulimit -t $(TEST_TIME_LIMIT) ; $(METIS) $(TPTP_PROBLEM_DIR)/NLP/NLP114-1.tptp | grep '^SZS status Satisfiable for'
	@ulimit -t $(TEST_TIME_LIMIT) ; $(METIS) $(TPTP_PROBLEM_DIR)/BOO/BOO003-4.tptp | grep '^SZS status Unsatisfiable for'
	@ulimit -t $(TEST_TIME_LIMIT) ; $(METIS) $(TPTP_PROBLEM_DIR)/BOO/BOO001-1.tptp | grep '^SZS status Unsatisfiable for'
	@ulimit -t $(TEST_TIME_LIMIT) ; $(METIS) $(TPTP_PROBLEM_DIR)/BOO/BOO027-1.tptp | grep '^SZS status Satisfiable for'
# Neither unordered nor positive literal selection can seem to detect this
#	@ulimit -t $(TEST_TIME_LIMIT) ; $(METIS) $(TPTP_PROBLEM_DIR)/BOO/BOO036-1.tptp | grep '^SZS status Satisfiable for'
	@ulimit -t $(TEST_TIME_LIMIT) ; $(METIS) $(TPTP_PROBLEM_DIR)/KRS/KRS174+1.tptp | grep '^SZS status Theorem for'

.PHONY: std-test
std-test: $(METIS)
	ulimit -t $(TEST_TIME_LIMIT) ; find $(NONEQUALITY_SET)/*.tptp | perl -n -e 'system ("time $(METIS) --show name --show goal --show clauses --show size --show category --show proof --show saturated $$_");' 2>&1 | tee std-log
	ulimit -t $(TEST_TIME_LIMIT) ; find $(EQUALITY_SET)/*.tptp | perl -n -e 'system ("time $(METIS) --show name --show goal --show clauses --show size --show category --show proof --show saturated $$_");' 2>&1 | tee -a std-log

.PHONY: tptp-test
tptp-test: $(METIS)
	ulimit -t $(TEST_TIME_LIMIT) ; find $(TPTP_CNF_SET)/*.tptp | perl -n -e 'system ("time $(METIS) --show name --show proof --show saturated $$_");' 2>&1 | tee tptp-log
	ulimit -t $(TEST_TIME_LIMIT) ; find $(TPTP_FOF_SET)/*.tptp | perl -n -e 'system ("time $(METIS) --show name --show proof --show saturated $$_");' 2>&1 | tee -a tptp-log

.PHONY: tests
tests: status-test std-test tptp-test

###############################################################################
# Profiling using MLton.
###############################################################################

DROP = <main>

KEEP = <main>

benchmark: $(MLTON_SRC) src/metis.sml
	@echo
	@echo '***************************************************************'
	@echo '* Compile a MLton version of the metis program with profiling *'
	@echo '***************************************************************'
	@echo
	@echo $@
	@$(MLPP) $(MLPP_OPTS) -c mlton $^ >benchmark.sml
	echo '$$(SML_LIB)/basis/basis.mlb $$(SML_LIB)/basis/mlton.mlb benchmark.sml' > benchmark.mlb
	$(MLTONC) $(MLTONC_OPTS) -profile time -profile-stack true benchmark.mlb
	rm benchmark.mlb benchmark.sml
	@echo

.PHONY: benchmark-test
benchmark-test: benchmark
	time ./benchmark --show name $(BENCHMARK_SET)/*.tptp | tee benchmark-log

benchmark.tab benchmark.dot: mlmon.out Makefile
	mlprof -call-graph benchmark.dot -keep '(and (thresh-stack 4) (or (not "$(DROP)") "$(KEEP)"))' -split '.*' benchmark mlmon.out >benchmark.tab

.PHONY: profile
profile: benchmark-test benchmark.tab

###############################################################################
# Releasing.
###############################################################################

RELEASE_DIR = release

HOL_RELEASE_DIR = $(HOME)/dev/metis/hol

RELEASE_STAMP = scripts/release_stamp

.PHONY: release-stamp
release-stamp: $(RELEASE_STAMP)
	 $(RELEASE_STAMP) -p Metis doc/*.html src/metis.sml

doc/example-cnf-proof.txt: data/problems/all/SYN075-1.tptp $(METIS)
	$(METIS) --show name --show clauses --show proof $< > $@

doc/logical-kernel.txt: src/Thm.sig Makefile.dev
	perl -n -e 'if (defined($$a)) { if ($$a++ > 0) { print STDOUT $$_; } } elsif ($$_ =~ /Primitive rules of inference/) { $$a = 0; print STDOUT "signature Thm =\n\ntype clause = LiteralSet.set\n\ntype thm\n\nval clause : thm -> clause\n"; }' < $< > $@

.PHONY: documentation
documentation: doc/example-cnf-proof.txt doc/logical-kernel.txt

.PHONY: tarball
tarball: clean doc/DONT-RELEASE Makefile.dev
	cd .. ; tar cvzhf metis/release/metis.tar.gz --exclude-from metis/doc/DONT-RELEASE metis

.PHONY: release
release: release-stamp mosml mlton documentation tarball
	rm -f $(RELEASE_DIR)/*.html $(RELEASE_DIR)/*.jpg $(RELEASE_DIR)/*.txt
	cp -v doc/*.html doc/*.jpg doc/*.txt $(RELEASE_DIR)/
	rsync -azv --delete --checksum --size-only --exclude=.cvsignore --exclude=CVS -e ssh release/ gilith@gilith.com:public_html/software/metis

.PHONY: hol-release
hol-release: mosml
	scripts/export_hol -d $(HOL_RELEASE_DIR) $(MOSML_OBJ)

###############################################################################
# The build scripts.
###############################################################################

COPY = scripts/copy_src

$(COPY): ../basic/scripts/copy_src
	@cp -fv $< $@
	@chmod -w $@

$(MLPP): ../basic/scripts/mlpp $(COPY) ; @$(COPY) $< $@

$(MOSML_DEP): ../basic/scripts/mosml_dep $(COPY) ; @$(COPY) $< $@

$(LINES): ../basic/scripts/ml_lines $(COPY) ; @$(COPY) $< $@

$(RELEASE_STAMP): ../basic/scripts/release_stamp $(COPY) ; @$(COPY) $< $@

.PHONY: build-scripts
build-scripts: $(COPY) $(MLPP) $(MOSML_DEP) $(LINES) $(RELEASE_STAMP)
