#################################################################-*-makefile-*-
# METIS DEVELOPMENT MAKEFILE
# Copyright (c) 2001 Joe Leslie-Hurd, distributed under the MIT license
###############################################################################

.PRECIOUS: bin/mlton/%.sml bin/mlton/%.mlb bin/polyml/%.sml

###############################################################################
# Uncomment your default compiler.
###############################################################################

METIS = bin/mlton/metis
PROBLEMS2TPTP = bin/mlton/problems2tptp

#METIS = bin/polyml/metis
#PROBLEMS2TPTP = bin/polyml/problems2tptp

#METIS = bin/mosml/metis
#PROBLEMS2TPTP = bin/mosml/problems2tptp

###############################################################################
# Cleaning temporary files.
###############################################################################

TEMP += \
  bin/mlton/*.ssa bin/mlton/*.ssa2 bin/mlton/basis.sml \
  bin/mlton/benchmark mlmon.out profile-* \
  cnf_*.tptp saturation.tptp std-log

###############################################################################
# The ML preprocessor.
###############################################################################

MLPP_OPTS += -r 'MetisDebug'
#MLPP_OPTS += -r 'BasicDebug|MetisDebug'
#MLPP_OPTS += -r 'BasicDebug|MetisDebug|MetisTrace[0-9]'

###############################################################################
# The Moscow ML compiler.
###############################################################################

MOSML_DEP = scripts/mosml_dep

bin/mosml/Makefile.src: Makefile Makefile.dev $(MOSML_DEP) $(MLPP)
	@echo
	@echo '+--------------------------------------------------+'
	@echo '| Regenerating the Moscow ML makefile dependencies |'
	@echo '+--------------------------------------------------+'
	@echo
	@$(MOSML_DEP) $(MOSML_SRC) $(MOSML_TARGETS) > $@

###############################################################################
# The MLton compiler.
###############################################################################

MLTON_OPTS += -verbose 1
#MLTON_OPTS += -const 'Exn.keepHistory true'
#MLTON_OPTS += -keep ssa -keep ssa2
#MLTON_OPTS += -show-basis basis.sml
#MLTON_OPTS += -inline 100000
#MLTON_OPTS += -const 'MLton.safe false' -const 'MLton.detectOverflow false'

###############################################################################
# Moving source files around.
###############################################################################

COPY = cp -v

src/selftest.sml: test/test.sml ; @$(COPY) $< $@

src/benchmark.sml: src/metis.sml ; @$(COPY) $< $@

###############################################################################
# Importing the basic library.
###############################################################################

BASIC_LIBRARY = ../basic

.PHONY: import-basic
import-basic:
	@$(COPY) $(BASIC_LIBRARY)/scripts/ml_lines $(LINES)
	@$(COPY) $(BASIC_LIBRARY)/scripts/mlpp $(MLPP)
	@$(COPY) $(BASIC_LIBRARY)/scripts/mosml_dep $(MOSML_DEP)
	@$(COPY) $(BASIC_LIBRARY)/scripts/release_stamp $(RELEASE_STAMP)
	@$(COPY) $(BASIC_LIBRARY)/src/ElementSet.sig src/ElementSet.sig
	@$(COPY) $(BASIC_LIBRARY)/src/ElementSet.sml src/ElementSet.sml
	@$(COPY) $(BASIC_LIBRARY)/src/Heap.sig src/Heap.sig
	@$(COPY) $(BASIC_LIBRARY)/src/Heap.sml src/Heap.sml
	@$(COPY) $(BASIC_LIBRARY)/src/KeyMap.sig src/KeyMap.sig
	@$(COPY) $(BASIC_LIBRARY)/src/KeyMap.sml src/KeyMap.sml
	@$(COPY) $(BASIC_LIBRARY)/src/Lazy.sig src/Lazy.sig
	@$(COPY) $(BASIC_LIBRARY)/src/Lazy.sml src/Lazy.sml
	@$(COPY) $(BASIC_LIBRARY)/src/Map.sig src/Map.sig
	@$(COPY) $(BASIC_LIBRARY)/src/Map.sml src/Map.sml
	@$(COPY) $(BASIC_LIBRARY)/src/Options.sig src/Options.sig
	@$(COPY) $(BASIC_LIBRARY)/src/Options.sml src/Options.sml
	@$(COPY) $(BASIC_LIBRARY)/src/Ordered.sig src/Ordered.sig
	@$(COPY) $(BASIC_LIBRARY)/src/Ordered.sml src/Ordered.sml
	@$(COPY) $(BASIC_LIBRARY)/src/Parse.sig src/Parse.sig
	@$(COPY) $(BASIC_LIBRARY)/src/Parse.sml src/Parse.sml
	@$(COPY) $(BASIC_LIBRARY)/src/Portable.sig src/Portable.sig
	@$(COPY) $(BASIC_LIBRARY)/src/PortableMosml.sml src/PortableMosml.sml
	@$(COPY) $(BASIC_LIBRARY)/src/PortableMlton.sml src/PortableMlton.sml
	@$(COPY) $(BASIC_LIBRARY)/src/PortablePolyml.sml src/PortablePolyml.sml
	@$(COPY) $(BASIC_LIBRARY)/src/Print.sig src/Print.sig
	@$(COPY) $(BASIC_LIBRARY)/src/Print.sml src/Print.sml
	@$(COPY) $(BASIC_LIBRARY)/src/Random.sig src/Random.sig
	@$(COPY) $(BASIC_LIBRARY)/src/Random.sml src/Random.sml
	@$(COPY) $(BASIC_LIBRARY)/src/Set.sig src/Set.sig
	@$(COPY) $(BASIC_LIBRARY)/src/Set.sml src/Set.sml
	@$(COPY) $(BASIC_LIBRARY)/src/Sharing.sig src/Sharing.sig
	@$(COPY) $(BASIC_LIBRARY)/src/Sharing.sml src/Sharing.sml
	@$(COPY) $(BASIC_LIBRARY)/src/Stream.sig src/Stream.sig
	@$(COPY) $(BASIC_LIBRARY)/src/Stream.sml src/Stream.sml
	@$(COPY) $(BASIC_LIBRARY)/src/Useful.sig src/Useful.sig
	@$(COPY) $(BASIC_LIBRARY)/src/Useful.sml src/Useful.sml

###############################################################################
# Generating the problem sets.
###############################################################################

PROBLEM_DIR = data/problems
TPTP_PROBLEM_DIR = test/tptp
COPY_PROBLEM = scripts/copy_problem
ALL_SET = $(PROBLEM_DIR)/all
NONEQUALITY_SET = $(PROBLEM_DIR)/nonequality
EQUALITY_SET = $(PROBLEM_DIR)/equality
TPTP_SET = $(PROBLEM_DIR)/tptp
HOL_SET = $(PROBLEM_DIR)/hol
SATISFIABLE_SET = $(PROBLEM_DIR)/satisfiable
INSTANT_SET = $(PROBLEM_DIR)/instant
BENCHMARK_SET = $(PROBLEM_DIR)/benchmark

.PHONY: problems-all
problems-all: $(PROBLEMS2TPTP)
	$(PROBLEMS2TPTP) --output-dir $(ALL_SET)
	@cp $(TPTP_PROBLEM_DIR)/BOO021-1.tptp $(ALL_SET)
	@cp $(TPTP_PROBLEM_DIR)/COL058-2.tptp $(ALL_SET)
	@cp $(TPTP_PROBLEM_DIR)/COL060-3.tptp $(ALL_SET)
	@cp $(TPTP_PROBLEM_DIR)/LCL009-1.tptp $(ALL_SET)
	@cp $(TPTP_PROBLEM_DIR)/LCL107-1.tptp $(ALL_SET)
	@cp $(TPTP_PROBLEM_DIR)/MGT019+2.tptp $(ALL_SET)
	@cp $(TPTP_PROBLEM_DIR)/NLP042+1.tptp $(ALL_SET)
	@cp $(TPTP_PROBLEM_DIR)/PUZ001-1.tptp $(ALL_SET)
	@cp $(TPTP_PROBLEM_DIR)/SEU140+2.tptp $(ALL_SET)
	@cp $(TPTP_PROBLEM_DIR)/SWV010+1.tptp $(ALL_SET)
	@cp $(TPTP_PROBLEM_DIR)/SWV017+1.tptp $(ALL_SET)
	@cp $(TPTP_PROBLEM_DIR)/SYN075-1.tptp $(ALL_SET)
	@cp $(TPTP_PROBLEM_DIR)/SYN075+1.tptp $(ALL_SET)

.PHONY: problems
problems: $(PROBLEMS2TPTP)
	if test -d $(PROBLEM_DIR) ; then rm -r $(PROBLEM_DIR)/ ; fi
	mkdir $(PROBLEM_DIR)
	mkdir $(ALL_SET)
	$(MAKE) problems-all
	mkdir $(NONEQUALITY_SET)
	for p in `$(PROBLEMS2TPTP) --collection nonequality --list` ; do $(COPY_PROBLEM) $(ALL_SET)/$$p.tptp $(NONEQUALITY_SET) ; done
	mkdir $(EQUALITY_SET)
	for p in `$(PROBLEMS2TPTP) --collection equality --list` ; do $(COPY_PROBLEM) $(ALL_SET)/$$p.tptp $(EQUALITY_SET) ; done
	mkdir $(TPTP_SET)
	for p in `$(PROBLEMS2TPTP) --collection tptp --list` ; do $(COPY_PROBLEM) $(ALL_SET)/$$p.tptp $(TPTP_SET) ; done
	mkdir $(HOL_SET)
	for p in `$(PROBLEMS2TPTP) --collection hol --list` ; do $(COPY_PROBLEM) $(ALL_SET)/$$p.tptp $(HOL_SET) ; done
	mkdir $(SATISFIABLE_SET)
	@$(COPY_PROBLEM) $(ALL_SET)/LOGICPROOF_1999.tptp $(SATISFIABLE_SET)
	@$(COPY_PROBLEM) $(ALL_SET)/GILMORE_2.tptp $(SATISFIABLE_SET)
	mkdir $(INSTANT_SET)
	@$(COPY_PROBLEM) $(ALL_SET)/TRUE.tptp $(INSTANT_SET)
	@$(COPY_PROBLEM) $(ALL_SET)/SIMPLE.tptp $(INSTANT_SET)
	@$(COPY_PROBLEM) $(ALL_SET)/CYCLIC.tptp $(INSTANT_SET)
	@$(COPY_PROBLEM) $(ALL_SET)/MICHAEL_NORRISH_BUG.tptp $(INSTANT_SET)
	@$(COPY_PROBLEM) $(ALL_SET)/PROP_6.tptp $(INSTANT_SET)
	@$(COPY_PROBLEM) $(ALL_SET)/MATHS4_EXAMPLE.tptp $(INSTANT_SET)
	@$(COPY_PROBLEM) $(ALL_SET)/P18.tptp $(INSTANT_SET)
	@$(COPY_PROBLEM) $(ALL_SET)/P39.tptp $(INSTANT_SET)
	@$(COPY_PROBLEM) $(ALL_SET)/P59.tptp $(INSTANT_SET)
	@$(COPY_PROBLEM) $(ALL_SET)/BAD_CONNECTIONS.tptp $(INSTANT_SET)
	@$(COPY_PROBLEM) $(ALL_SET)/TRANS_SYMM.tptp $(INSTANT_SET)
	@$(COPY_PROBLEM) $(ALL_SET)/CYCLIC_SUBSTITUTION_BUG.tptp $(INSTANT_SET)
	@$(COPY_PROBLEM) $(ALL_SET)/P48.tptp $(INSTANT_SET)
	mkdir $(BENCHMARK_SET)
	@$(COPY_PROBLEM) $(ALL_SET)/LOS.tptp $(BENCHMARK_SET)
	@$(COPY_PROBLEM) $(ALL_SET)/STEAM_ROLLER.tptp $(BENCHMARK_SET)
	@$(COPY_PROBLEM) $(ALL_SET)/GILMORE_9.tptp $(BENCHMARK_SET)
	@$(COPY_PROBLEM) $(ALL_SET)/AGATHA.tptp $(BENCHMARK_SET)
	@$(COPY_PROBLEM) $(ALL_SET)/JACOBSON_2.tptp $(BENCHMARK_SET)
	@$(COPY_PROBLEM) $(ALL_SET)/WISHNU.tptp $(BENCHMARK_SET)

###############################################################################
# Testing Metis on the problem sets.
###############################################################################

TEST_TIME_LIMIT = 60

.PHONY: status-test
status-test: $(METIS)
#
# Testing basic functionality
#
	@ulimit -t $(TEST_TIME_LIMIT) ; $(METIS) $(ALL_SET)/SIMPLE.tptp | grep 'SZS status Theorem for'
	@ulimit -t $(TEST_TIME_LIMIT) ; $(METIS) $(ALL_SET)/REFLEXIVITY.tptp | grep 'SZS status Theorem for'
	@ulimit -t $(TEST_TIME_LIMIT) ; $(METIS) $(ALL_SET)/SYMMETRY.tptp | grep 'SZS status Theorem for'
#
# Testing the TPTP parser
#
	@ulimit -t $(TEST_TIME_LIMIT) ; $(METIS) test/tptp/CNF_BOOLEAN.tptp | grep 'SZS status Unsatisfiable for'
	@ulimit -t $(TEST_TIME_LIMIT) ; $(METIS) test/tptp/NUMBERED_FORMULAS.tptp | grep 'SZS status Theorem for'
	@ulimit -t $(TEST_TIME_LIMIT) ; $(METIS) test/tptp/DEFINED_TERMS.tptp | grep 'SZS status CounterSatisfiable for'
	@ulimit -t $(TEST_TIME_LIMIT) ; $(METIS) test/tptp/QUOTED_TERMS.tptp | grep 'SZS status Theorem for'
	@ulimit -t $(TEST_TIME_LIMIT) ; $(METIS) test/tptp/QUOTED_TERMS_IDENTITY.tptp | grep 'SZS status Theorem for'
	@ulimit -t $(TEST_TIME_LIMIT) ; $(METIS) test/tptp/WEIRD_FORMULA_NAME.tptp | grep 'SZS status Theorem for'
# Metis wrongly identifies quoted and unquoted special terms
#	@ulimit -t $(TEST_TIME_LIMIT) ; $(METIS) test/tptp/QUOTED_TERMS_DIFFERENT.tptp | grep 'SZS status CounterSatisfiable for'
#	@ulimit -t $(TEST_TIME_LIMIT) ; $(METIS) test/tptp/QUOTED_TERMS_SPECIAL.tptp | grep 'SZS status CounterSatisfiable for'
	@ulimit -t $(TEST_TIME_LIMIT) ; $(METIS) test/tptp/QUOTED_NUMBERS.tptp | grep 'SZS status Theorem for'
	@ulimit -t $(TEST_TIME_LIMIT) ; $(METIS) test/tptp/MIXED_PROBLEM.tptp | grep 'SZS status Theorem for'
	@ulimit -t $(TEST_TIME_LIMIT) ; $(METIS) test/tptp/BLOCK_COMMENTS.tptp | grep 'SZS status Theorem for'
	@ulimit -t $(TEST_TIME_LIMIT) ; $(METIS) --tptp test/tptp test/tptp/INCLUDE_DIRECTIVE.tptp | grep 'SZS status Theorem for'
#
# Testing the prover on CASC sample problems
#
	@ulimit -t $(TEST_TIME_LIMIT) ; $(METIS) $(ALL_SET)/MGT019+2.tptp | grep 'SZS status CounterSatisfiable for'
	@ulimit -t $(TEST_TIME_LIMIT) ; $(METIS) $(ALL_SET)/NLP042+1.tptp | grep 'SZS status CounterSatisfiable for'
	@ulimit -t $(TEST_TIME_LIMIT) ; $(METIS) $(ALL_SET)/SEU140+2.tptp | grep 'SZS status Theorem for'
	@ulimit -t $(TEST_TIME_LIMIT) ; $(METIS) $(ALL_SET)/SWV010+1.tptp | grep 'SZS status Satisfiable for'
# Positive literal selection can't seem to detect this
#	@ulimit -t $(TEST_TIME_LIMIT) ; $(METIS) $(ALL_SET)/SWV017+1.tptp | grep 'SZS status Satisfiable for'
	@ulimit -t $(TEST_TIME_LIMIT) ; $(METIS) $(ALL_SET)/SYN075-1.tptp | grep 'SZS status Unsatisfiable for'
	@ulimit -t $(TEST_TIME_LIMIT) ; $(METIS) $(ALL_SET)/SYN075+1.tptp | grep 'SZS status Theorem for'
#
# Testing the prover on TPTP problems
#
	@ulimit -t $(TEST_TIME_LIMIT) ; $(METIS) $(TPTP_PROBLEM_DIR)/BOO001-1.tptp | grep 'SZS status Unsatisfiable for'
	@ulimit -t $(TEST_TIME_LIMIT) ; $(METIS) $(TPTP_PROBLEM_DIR)/BOO003-4.tptp | grep 'SZS status Unsatisfiable for'
	@ulimit -t $(TEST_TIME_LIMIT) ; $(METIS) $(TPTP_PROBLEM_DIR)/BOO027-1.tptp | grep 'SZS status Satisfiable for'
# Neither unordered nor positive literal selection can seem to detect this
#	@ulimit -t $(TEST_TIME_LIMIT) ; $(METIS) $(TPTP_PROBLEM_DIR)/BOO036-1.tptp | grep 'SZS status Satisfiable for'
	@ulimit -t $(TEST_TIME_LIMIT) ; $(METIS) $(TPTP_PROBLEM_DIR)/KRS063+1.tptp | grep 'SZS status Unsatisfiable for'
	@ulimit -t $(TEST_TIME_LIMIT) ; $(METIS) $(TPTP_PROBLEM_DIR)/KRS018+1.tptp | grep 'SZS status Satisfiable for'
# Unordered literal selection can't seem to detect this
	@ulimit -t $(TEST_TIME_LIMIT) ; $(METIS) $(TPTP_PROBLEM_DIR)/MGT031-1.tptp | grep 'SZS status Satisfiable for'
	@ulimit -t $(TEST_TIME_LIMIT) ; $(METIS) $(TPTP_PROBLEM_DIR)/MGT041-2.tptp | grep 'SZS status Unsatisfiable for'
	@ulimit -t $(TEST_TIME_LIMIT) ; $(METIS) $(TPTP_PROBLEM_DIR)/NLP114-1.tptp | grep 'SZS status Satisfiable for'
	@ulimit -t $(TEST_TIME_LIMIT) ; $(METIS) $(TPTP_PROBLEM_DIR)/KRS174+1.tptp | grep 'SZS status Theorem for'
#
# Testing the prover on fixed soundness bugs
#
	@ulimit -t $(TEST_TIME_LIMIT) ; $(METIS) test/tptp/SPLIT_NOT_IFF_BUG.tptp | grep 'SZS status CounterSatisfiable for'

STD_BENCHMARK = scripts/benchmark

$(STD_BENCHMARK): Makefile.dev
	echo '#!/bin/bash' > $@
	echo >> $@
	echo "if ! test -x $(METIS) ; then echo \"cannot execute $(METIS)\" ; exit 1 ; fi" >> $@
	echo >> $@
	echo ulimit -t $(TEST_TIME_LIMIT) >> $@
	echo >> $@
	find $(NONEQUALITY_SET)/*.tptp | perl -ne 'print STDOUT "time $(METIS) --show all $$_";' >> $@
	echo >> $@
	find $(EQUALITY_SET)/*.tptp | perl -ne 'print STDOUT "time $(METIS) --show all $$_";' >> $@
	echo >> $@
	echo "echo \"Completed benchmark of $(METIS)\"" >> $@
	chmod +x $@

.PHONY: std-test
std-test: $(STD_BENCHMARK) $(METIS)
	$(STD_BENCHMARK) 2>&1 | tee std-log

.PHONY: tests
tests: status-test std-test

###############################################################################
# Initialization following a repo clone.
###############################################################################

.PHONY: init
init:
	@echo
	@echo '+----------------------------------------------+'
	@echo '| Initialize this development version of Metis |'
	@echo '+----------------------------------------------+'
	@echo
	@$(COPY) LICENSE doc/MIT-LICENSE
	$(MAKE) problems

###############################################################################
# Counting the number of lines of code.
###############################################################################

LINES = scripts/ml_lines

.PHONY: lines
lines: $(LINES)
	@echo
	@echo -n 'Metis '
	@$(LINES) $(SRC) src/metis.sml
	@echo

###############################################################################
# Profiling using MLton.
###############################################################################

BENCHMARK_OPTS = --show name $(BENCHMARK_SET)/*.tptp

profile-time.mlb: bin/mlton/benchmark.sml
	echo '$$(SML_LIB)/basis/basis.mlb $$(SML_LIB)/basis/mlton.mlb $<' > $@

profile-time: profile-time.mlb
	@echo
	@echo '+-------------------------------------------------+'
	@echo '| Compile the Metis benchmark with time profiling |'
	@echo '+-------------------------------------------------+'
	@echo
	$(MLTON) $(MLTON_OPTS) -profile time -profile-stack true -profile-branch true $<
	@echo

profile-time.out profile-time-log: profile-time
	time ./profile-time $(BENCHMARK_OPTS) | tee profile-time-log
	mv mlmon.out profile-time.out

profile-time.txt: profile-time.out Makefile.dev
	mlprof -show-line true -raw true -keep '(and (thresh 0.1) (thresh-stack 0.1))' -split '.*' profile-time profile-time.out > $@

profile-time.dot: profile-time.out Makefile.dev
	mlprof -show-line true -raw true -call-graph $@ -keep '(thresh-stack 1)' -graph-title "Metis Time Profiling" -split '.*' profile-time profile-time.out > /dev/null

.PHONY: profile
profile: profile-time.txt profile-time.dot

###############################################################################
# Releasing.
###############################################################################

RELEASE_DIR = release

HOL_RELEASE_DIR = $(HOME)/dev/metis/hol

RELEASE_STAMP = scripts/release_stamp

EXAMPLE_CNF_PROOF = \
  data/problems/all/SYN075-1.tptp

EXAMPLE_FOF_PROOF = \
  data/problems/all/SYN075+1.tptp \
  data/problems/all/SEU140+2.tptp

EXAMPLE_FOF_MODEL = \
  data/problems/all/MGT019+2.tptp \
  data/problems/all/SWV010+1.tptp \
  data/problems/all/NLP042+1.tptp

.PHONY: release-stamp
release-stamp: $(RELEASE_STAMP)
	 $(RELEASE_STAMP) -p Metis doc/*.html src/metis.sml

doc/example-cnf-proof.txt: $(EXAMPLE_CNF_PROOF) $(METIS)
	$(METIS) --show name --show clauses --show proof $(EXAMPLE_CNF_PROOF) > $@

doc/example-fof-proof.txt: $(EXAMPLE_FOF_PROOF) $(METIS)
	$(METIS) --show name --show goal --show clauses --show proof $(EXAMPLE_FOF_PROOF) > $@

doc/example-fof-model.txt: $(EXAMPLE_FOF_MODEL) $(METIS)
	$(METIS) --show name --show goal --show clauses --show saturation $(EXAMPLE_FOF_MODEL) > $@

doc/logical-kernel.txt: src/Thm.sig Makefile.dev
	perl -n -e 'if (defined($$a)) { if ($$_ =~ /Primitive rules of inference/) { $$a = undef; } } elsif ($$_ =~ /Theorem destructors/) { $$a = 0; } if (!defined($$a)) { $$_ =~ s/(Literal|Subst|Term)[.]//g; print STDOUT $$_; }' < $< > $@

.PHONY: documentation
documentation: doc/example-cnf-proof.txt doc/example-fof-proof.txt doc/example-fof-model.txt doc/logical-kernel.txt

.PHONY: tarball
tarball: doc/DONT-RELEASE Makefile.dev
	$(MAKE) clean
	cd .. ; COPYFILE_DISABLE=true tar cvzhf metis/release/metis.tar.gz --exclude-from metis/doc/DONT-RELEASE metis

.PHONY: release-instructions
release-instructions:
	@echo "==============================================================="
	@echo "Completed release, now do the following:"
	@echo "1. git add, commit and push all changes"
	@perl -ne 'if ($$_ =~ /^Metis ([0-9.]+) \(release ([0-9]+)\),$$/) { print "2. git tag -a -s v$$1.$$2 -m \"Version $$1 (release $$2)\"\n"; }' doc/download.html
	@echo "3. git push --tags"
	@echo "4. Browse to github > metis > releases > Latest release"
	@echo "5. Add the release name and tarball"
	@echo "==============================================================="

.PHONY: release
release: release-stamp mosml mlton polyml status-test documentation $(STD_BENCHMARK)
	rm -f $(RELEASE_DIR)/*.html $(RELEASE_DIR)/*.jpg $(RELEASE_DIR)/*.txt
	cp -v doc/*.html doc/*.jpg doc/*.txt $(RELEASE_DIR)/
	cp -v doc/favicon.ico $(RELEASE_DIR)/
	cp -v doc/MIT-LICENSE $(RELEASE_DIR)/
	$(MAKE) tarball
	rsync -azv --delete --checksum --size-only --exclude=.gitignore -e ssh $(RELEASE_DIR)/ joe@laurelin.gilith.com:www/gilith/software/metis
	ssh joe@laurelin.gilith.com '/bin/bash -l bin/install-metis'
	@if GIT_PAGER='' git grep '[*][*][*]' ; then echo "WARNING: TODO comments discovered" ; fi
	$(MAKE) release-instructions

.PHONY: hol-release
hol-release: mosml
	scripts/export_hol -d $(HOL_RELEASE_DIR) $(MOSML_OBJ)
