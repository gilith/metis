--------------------------------------------------------------------------
The parser and pretty-printer

3 = f x

f x y = y

P x y

P (f x) y

f x = 3

!x. P x y

!x y. P x y

!x y z. P x y z

x = y

x = 3

x + y = y

x / y * z = w

x * y * z = x * (y * z)

!x. ?y. x <= y /\ y <= x

?x. !y. x + y = y /\ y <= x

p /\ q \/ r /\ p ==> q <=> p

p

~!x. bool x

p ==> !x. bool x

p ==> ~!x. bool x

~!x. bool x

~~!x. bool x

hello + there <> everybody

!x y. ?z. x < z /\ y < z

~(!x. P x) <=> ?y. ~P y

?y. x < y ==> !v. ?w. x * v < y * w

(<=)

(<=) <= b

(<=) <= (+)

(<=) x

(<=) <= (+) x

~B (P % ((,) % c_a % v_b))

B ((<=) % 0 % (LENGTH % NIL))

~(a = b)

!x. p x ==> !y. p y

(!x. p x) ==> !y. p y

!x. ~~x = x

x + (y + z) = a

(x @ y) @ z = a

p ((a @ a) @ a = a)

!x y z. (x @ y) @ z = (x @ z) @ y @ z

~(!x. q x) /\ p

!x. f (~~x) b (~c)

p ==> ~(a /\ b)

!water. drinks (water)

!vat water. drinks ((vat) p x (water))

!x y. ~{x < y} /\ T

[3]

!x y z. ?x' y' z'.
  P x y z ==> P x' y' z'

(!x. P x ==> !x. Q x) /\
((!x. Q x \/ R x) ==> ?x. Q x /\ R x) /\
((?x. R x) ==> !x. L x ==> M x) ==>
!x. P x /\ L x ==> M x

!x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11
  x12 x13 x14 x15 x16 x17 x18 x19 x20
  x21 x22 x23 x24 x25 x26 x27 x28 x29
  x30 x31 x32. ?y0 y1 y2 y3 y4 y5 y6 y7.
  P

!x x x x x x x x x x x x x x x x x x x x
  x x x x x x x x x x. ?y y y y y y y y
  y y y y y y y y y y y.
  P (x, y) /\ P (x, y) /\ P (x, y) /\
  P (x, y) /\ P (x, y) /\ P (x, y) /\
  P (x, y) /\ P (x, y) /\ P (x, y) /\
  P (x, y) /\ P (x, y) /\ P (x, y) /\
  P (x, y) /\ P (x, y) /\
  ~~~~~~~~~~~~~f
                 (f (f (f x y) (f x y))
                    (f (f x y) (f x y)))
                 (f (f (f x y) (f x y))
                    (f (f x y) (f x y)))

(!x.
   extremely__long__predicate__name) /\
F

(!x. x = x) /\
(!x y. ~(x = y) \/ y = x) /\
(!x y z.
   ~(x = y) \/ ~(y = z) \/ x = z) /\
(!x y z. b . x . y . z = x . (y . z)) /\
(!x y. t . x . y = y . x) /\
(!x y z. ~(x = y) \/ x . z = y . z) /\
(!x y z. ~(x = y) \/ z . x = z . y) ==>
~(b . (b . (t . b) . b) . t . x . y .
  z = y . (x . z)) ==> F

--------------------------------------------------------------------------
Substitution

x

x'

x''

x

x0

x1

!x. x = $z

!x'. x' = $x

!x' x''. x' = $x ==> x' = x''

--------------------------------------------------------------------------
Unification

c

c

f c

f 0 0 0

<[]>

<[x |-> c]>

<[x |-> c_x]>

<[x |-> $y, z |-> f $y]>

--------------------------------------------------------------------------
The logical kernel

START OF PROOF
(0) |- p \/ q  [Axiom]
(1) |- ~p \/ r  [Axiom]
(2) |- q \/ r  [Resolve {res = p, pos = (0), neg = (1)}]
END OF PROOF

START OF PROOF
(0) |- $x = $x  [Refl $x]
(1) |- ~($x0 = $y0) \/ ~($y0 = $x1) \/ $x0 = $x1
    [Equality {lit = ~($x0 = $x1), path = [0], res = $y0}]
(2) |- ~($x1 = $y1) \/ ~($y0 = $y1) \/ $y0 = $x1
    [Equality {lit = ~($y0 = $x1), path = [1], res = $y1}]
(3) |- ~($x0 = $y0) \/ ~($x1 = $y1) \/ ~($y0 = $y1) \/ $x0 = $x1
    [Resolve {res = $y0 = $x1, pos = (2), neg = (1)}]
(4) |- ~($x = $x) \/ ~($x = $y) \/ ~($z = $y) \/ $x = $z
    [Subst
       {sub = <[x0 |-> $x, x1 |-> $z, y0 |-> $x, y1 |-> $y]>, thm = (3)}]
(5) |- ~($x = $y) \/ ~($z = $y) \/ $x = $z
    [Resolve {res = $x = $x, pos = (0), neg = (4)}]
(6) |- ~($x = $x) \/ ~($x = $y) \/ $y = $x
    [Equality {lit = $x = $x, path = [0], res = $y}]
(7) |- ~($x = $y) \/ $y = $x
    [Resolve {res = $x = $x, pos = (0), neg = (6)}]
(8) |- ~($y = $z) \/ $z = $y
    [Subst {sub = <[x |-> $y, y |-> $z]>, thm = (7)}]
(9) |- ~($x = $y) \/ ~($y = $z) \/ $x = $z
    [Resolve {res = $z = $y, pos = (8), neg = (5)}]
END OF PROOF

START OF PROOF
(0) |- $x = $x  [Refl $x]
(1) |- f c = f c  [Subst {sub = <[x |-> f c]>, thm = (0)}]
END OF PROOF

--------------------------------------------------------------------------
Derived rules of inference

|- ~(a = b) \/ ~(b = a) \/ $x = a \/ a = $x \/ f a = $x

|- ~(a = b) \/ $x = a \/ f a = $x

|- ~(a = b) \/ ~(b = a) \/ $x = a \/ f a = $x

|- ~(a = b) \/ ~(b = a) \/ $x = a \/ $x = f a \/ a = $x

|- ~(b = a) \/ $x = a \/ a = $x \/ f a = $x

|- e * (i $z * $z) = e

|- f (e * (i $z * $z)) = f e

--------------------------------------------------------------------------
Discrimination nets for literals

[] + NEGATIVE []

[P (f c $_ a) |-> 1] + NEGATIVE []

[P (f c $_ a) |-> 1, P (f c $_ a) |-> 2] + NEGATIVE []

[P (f c $_ a) |-> 1, P (f c $_ a) |-> 2, P (f c a a) |-> 3] + NEGATIVE []

[P (f c $_ a) |-> 1, P (f c $_ a) |-> 2, P (f c a a) |-> 3,
 P (f c b a) |-> 4] + NEGATIVE []

[P (f c $_ a) |-> 1, P (f c $_ a) |-> 2, P (f c a a) |-> 3,
 P (f c b a) |-> 4] + NEGATIVE [Q |-> 5]

[P (f c $_ a) |-> 1, P (f c $_ a) |-> 2, P (f c a a) |-> 3,
 P (f c b a) |-> 4] + NEGATIVE [Q |-> 5, Q |-> 6]

[P (f c $_ a) |-> 1, P (f c $_ a) |-> 2, P (f c a a) |-> 3,
 P (f c b a) |-> 4] + NEGATIVE [Q |-> 5, Q |-> 6, Q |-> 7]

[P (f c $_ a) |-> 1, P (f c $_ a) |-> 2, P (f c a a) |-> 3,
 P (f c b a) |-> 4] + NEGATIVE [Q |-> 5, Q |-> 6, Q |-> 7, Q |-> 8]

--------------------------------------------------------------------------
The Knuth-Bendix ordering on terms

SOME LESS

SOME GREATER

NONE

SOME GREATER

SOME LESS

SOME EQUAL

NONE

NONE

SOME GREATER

NONE

NONE

SOME LESS

SOME LESS

SOME LESS

NONE

NONE

SOME GREATER

--------------------------------------------------------------------------
Rewriting

|- e * (i $z * $z) = i e * e

|- e = e

[|- e * $x = $x, |- $x * e = $x, |- i $x * $x = e, |- $x * i $x = e]

|- e * e = e

|- e * (i $z * $z) = e

|- e = e

|- ~(f a = a) \/ ~(g (f a) = b)

|- ~(a = a) \/ ~(g a = b)

|- a <= f (f a)

|- a <= a

|- ~(f a = f a)

|- ~(b = b)

|- ~(a = b) \/ P a \/ P b

|- ~(a = b) \/ P a

|- ~(f $x = $x) \/ P (f $x) \/ P (f $y) \/ P (f a)

|- ~(f $x = $x) \/ P $x \/ P (f $y) \/ P (f a)

|- ~(f (f (f (f (f $x)))) = $x) \/
   ~(f (f (f (f (f (f (f (f $x))))))) = $x) \/ P (f $x)

|- ~($x = $x) \/ ~(f $x = $x) \/ P $x

|- ~(a = b) \/ b = a

|- ~(a = b) \/ a = a

|- ~(a = b) \/ ~(b = c) \/ a = c

|- ~(a = b) \/ ~(a = c) \/ a = a

|- ~(a = b) \/ ~(b = c) \/ ~(c = d) \/ a = d

|- ~(a = b) \/ ~(a = c) \/ ~(a = d) \/ a = a

--------------------------------------------------------------------------
Unit cache

U{1}

U{3}

|- F

--------------------------------------------------------------------------
Negation normal form

F

((?y. Q y) <=> ?z. P z /\ Q z) \/ ?x. ~P x

T

~p /\ (~q <=> ~r) /\ (~p <=> ~q <=> r)

~p <=> ~q

~p <=> ~q <=> r

~p <=> ~q <=> ~r <=> ~s

~p <=> ~q <=> ~r <=> ~s <=> t

--------------------------------------------------------------------------
Conjunctive normal form

F

p /\ (q \/ r) /\ (q \/ s) /\ (~q \/ ~s)

p /\ (q \/ r) /\ (q \/ s) /\ (~q \/ ~s)

F

F

~($x < skolemFOFtoCNF_y $x) \/
$x * $v < skolemFOFtoCNF_y_1 $x * skolemFOFtoCNF_w $v $x

~P $x \/ ~P $z \/ ~Q $z \/ Q skolemFOFtoCNF_y_2

skolemFOFtoCNF_x + skolemFOFtoCNF_y_3 = 2

p $x' \/ r $x $y

(~Q skolemFOFtoCNF_x_1 \/ Q skolemFOFtoCNF_x_2) /\
(~Q skolemFOFtoCNF_x_1 \/ R skolemFOFtoCNF_x_2) /\
(~R skolemFOFtoCNF_x_1 \/ Q skolemFOFtoCNF_x_2) /\
(~R skolemFOFtoCNF_x_1 \/ R skolemFOFtoCNF_x_2) /\ (~P $x \/ Q $x') /\
(~L $x' \/ ~R $x \/ M $x') /\ ~M skolemFOFtoCNF_x_3 /\
L skolemFOFtoCNF_x_3 /\ P skolemFOFtoCNF_x_3

--------------------------------------------------------------------------
Finite models

Model{8}

0 + $x = $x                   | random sampling = 0%  | exhaustive = 12%
~$x + $x = 0                  | random sampling = 13% | exhaustive = 12%
$x + $y + $z = $x + ($y + $z) | random sampling = 2%  | exhaustive = 13%
$x + 0 = $x                   | random sampling = 0%  | exhaustive = 0%
$x + ~$x = 0                  | random sampling = 25% | exhaustive = 25%
~~$x = $x                     | random sampling = 0%  | exhaustive = 0%

Model{8}

0 + $x = $x                   | random sampling = 100% | exhaustive = 75%
~$x + $x = 0                  | random sampling = 88%  | exhaustive = 88%
$x + $y + $z = $x + ($y + $z) | random sampling = 50%  | exhaustive = 27%
$x + 0 = $x                   | random sampling = 0%   | exhaustive = 12%
$x + ~$x = 0                  | random sampling = 38%  | exhaustive = 38%
~~$x = $x                     | random sampling = 50%  | exhaustive = 25%

Model{8}

0 + $x = $x                   | random sampling = 100% | exhaustive = 100%
~$x + $x = 0                  | random sampling = 100% | exhaustive = 100%
$x + $y + $z = $x + ($y + $z) | random sampling = 100% | exhaustive = 100%
$x + 0 = $x                   | random sampling = 100% | exhaustive = 100%
$x + ~$x = 0                  | random sampling = 100% | exhaustive = 100%
~~$x = $x                     | random sampling = 100% | exhaustive = 100%

--------------------------------------------------------------------------
Checking the standard model

100%  $x = $x

100%  ~($x = $y) \/ $y = $x

100%  ~($x = $y) \/ ~($y = $z) \/ $x = $z

100%  project1 $x1 = $x1

100%  project1 $x1 $x2 = $x1

100%  project2 $x1 $x2 = $x2

100%  project1 $x1 $x2 $x3 = $x1

100%  project2 $x1 $x2 $x3 = $x2

100%  project3 $x1 $x2 $x3 = $x3

100%  project1 $x1 $x2 $x3 $x4 = $x1

100%  project2 $x1 $x2 $x3 $x4 = $x2

100%  project3 $x1 $x2 $x3 $x4 = $x3

100%  project4 $x1 $x2 $x3 $x4 = $x4

100%  project1 $x1 $x2 $x3 $x4 $x5 = $x1

100%  project2 $x1 $x2 $x3 $x4 $x5 = $x2

100%  project3 $x1 $x2 $x3 $x4 $x5 = $x3

100%  project4 $x1 $x2 $x3 $x4 $x5 = $x4

100%  project5 $x1 $x2 $x3 $x4 $x5 = $x5

100%  project1 $x1 $x2 $x3 $x4 $x5 $x6 = $x1

100%  project2 $x1 $x2 $x3 $x4 $x5 $x6 = $x2

100%  project3 $x1 $x2 $x3 $x4 $x5 $x6 = $x3

100%  project4 $x1 $x2 $x3 $x4 $x5 $x6 = $x4

100%  project5 $x1 $x2 $x3 $x4 $x5 $x6 = $x5

100%  project6 $x1 $x2 $x3 $x4 $x5 $x6 = $x6

100%  project1 $x1 $x2 $x3 $x4 $x5 $x6 $x7 = $x1

100%  project2 $x1 $x2 $x3 $x4 $x5 $x6 $x7 = $x2

100%  project3 $x1 $x2 $x3 $x4 $x5 $x6 $x7 = $x3

100%  project4 $x1 $x2 $x3 $x4 $x5 $x6 $x7 = $x4

100%  project5 $x1 $x2 $x3 $x4 $x5 $x6 $x7 = $x5

100%  project6 $x1 $x2 $x3 $x4 $x5 $x6 $x7 = $x6

100%  project7 $x1 $x2 $x3 $x4 $x5 $x6 $x7 = $x7

100%  project1 $x1 $x2 $x3 $x4 $x5 $x6 $x7 $x8 = $x1

100%  project2 $x1 $x2 $x3 $x4 $x5 $x6 $x7 $x8 = $x2

100%  project3 $x1 $x2 $x3 $x4 $x5 $x6 $x7 $x8 = $x3

100%  project4 $x1 $x2 $x3 $x4 $x5 $x6 $x7 $x8 = $x4

100%  project5 $x1 $x2 $x3 $x4 $x5 $x6 $x7 $x8 = $x5

100%  project6 $x1 $x2 $x3 $x4 $x5 $x6 $x7 $x8 = $x6

100%  project7 $x1 $x2 $x3 $x4 $x5 $x6 $x7 $x8 = $x7

100%  project8 $x1 $x2 $x3 $x4 $x5 $x6 $x7 $x8 = $x8

100%  project1 $x1 $x2 $x3 $x4 $x5 $x6 $x7 $x8 $x9 = $x1

100%  project2 $x1 $x2 $x3 $x4 $x5 $x6 $x7 $x8 $x9 = $x2

100%  project3 $x1 $x2 $x3 $x4 $x5 $x6 $x7 $x8 $x9 = $x3

100%  project4 $x1 $x2 $x3 $x4 $x5 $x6 $x7 $x8 $x9 = $x4

100%  project5 $x1 $x2 $x3 $x4 $x5 $x6 $x7 $x8 $x9 = $x5

100%  project6 $x1 $x2 $x3 $x4 $x5 $x6 $x7 $x8 $x9 = $x6

100%  project7 $x1 $x2 $x3 $x4 $x5 $x6 $x7 $x8 $x9 = $x7

100%  project8 $x1 $x2 $x3 $x4 $x5 $x6 $x7 $x8 $x9 = $x8

100%  project9 $x1 $x2 $x3 $x4 $x5 $x6 $x7 $x8 $x9 = $x9

100%  ~isZero $x \/ $x = 0

100%  ~($x = 0) \/ isZero $x

100%  0 + 1 = 1

100%  1 + 1 = 2

100%  2 + 1 = 3

100%  3 + 1 = 4

100%  4 + 1 = 5

100%  5 + 1 = 6

100%  6 + 1 = 7

100%  7 + 1 = 8

100%  8 + 1 = 9

100%  9 + 1 = 10

100%  ~1 = negative1

100%  ~2 = negative2

100%  ~3 = negative3

100%  ~4 = negative4

100%  ~5 = negative5

100%  ~6 = negative6

100%  ~7 = negative7

100%  ~8 = negative8

100%  ~9 = negative9

100%  ~10 = negative10

100%  0 + $x = $x

100%  $x + $y = $y + $x

100%  $x + ($y + $z) = $x + $y + $z

100%  ~$x + $x = 0

100%  ~~$x = $x

100%  $x - $y = $x + ~$y

100%  suc $x = $x + 1

100%  pre $x = $x - 1

100%  $x <= $x

100%  ~($x <= $y) \/ ~($y <= $z) \/ $x <= $z

100%  ~($x <= $y) \/ ~($y <= $x) \/ $x = $y

100%  0 <= $x

100%  ~($x >= $y) \/ $y <= $x

100%  ~($y <= $x) \/ $x >= $y

100%  $x <= $y \/ $x > $y

100%  ~($x <= $y) \/ ~($x > $y)

100%  $x < $y \/ $y <= $x

100%  ~($x < $y) \/ ~($y <= $x)

100%  ~($x <= $y) \/ ~$y <= ~$x \/ $x = 0

100%  1 * $x = $x

100%  0 * $x = 0

100%  $x * $y = $y * $x

100%  $x * ($y * $z) = $x * $y * $z

100%  $x * ($y + $z) = $x * $y + $x * $z

100%  $x * ~$y = ~($x * $y)

100%  $x mod $y < $y \/ $y = 0

100%  $y * ($x div $y) + $x mod $y = $x

100%  exp $x 0 = 1

100%  $y = 0 \/ exp $x $y = $x * exp $x (pre $y)

100%  divides $x $x

100%  ~divides $x $y \/ ~divides $y $z \/ divides $x $z

100%  ~divides $x $y \/ ~divides $y $x \/ $x = $y

100%  divides 1 $x

100%  divides $x 0

100%  even 0

100%  ~even (pre $x) \/ $x = 0 \/ odd $x

100%  ~odd (pre $x) \/ $x = 0 \/ even $x

100%  ~member $x empty

100%  member $x universe

100%  member $x $y \/ member $x (complement $y)

100%  ~member $x $y \/ ~member $x (complement $y)

100%  complement (complement $x) = $x

100%  complement empty = universe

100%  complement universe = empty

100%  subset $x $x

100%  ~subset $x $y \/ ~subset $y $z \/ subset $x $z

100%  ~subset $x $y \/ ~subset $y $x \/ $x = $y

100%  subset empty $x

100%  subset $x universe

100%  ~subset $x $y \/ subset (complement $y) (complement $x)

100%  ~member $x $y \/ ~subset $y $z \/ member $x $z

100%  union $x $y = union $y $x

100%  union $x (union $y $z) = union (union $x $y) $z

100%  union empty $x = $x

100%  union universe $x = universe

100%  subset $x (union $x $y)

100%  ~member $x (union $y $z) \/ member $x $y \/ member $x $z

100%  intersect $x $y = complement (union (complement $x) (complement $y))

100%  subset (intersect $x $y) $x

100%  difference $x $y = intersect $x (complement $y)

100%  symmetricDifference $x $y =
      union (difference $x $y) (difference $y $x)

100%  member $x (insert $x $y)

100%  singleton $x = insert $x empty

100%  card empty = 0

100%  card (insert $x $y) = suc (card $y) \/ member $x $y

100%  null nil

100%  ~null $x \/ $x = nil

100%  ~(nil = $x :: $y)

100%  $x @ $y @ $z = ($x @ $y) @ $z

100%  nil @ $x = $x

100%  $x @ nil = $x

100%  length nil = 0

100%  length ($x :: $y) >= length $y

100%  length ($x @ $y) >= length $x

100%  length ($x @ $y) >= length $y

100%  suc (length (tail $x)) = length $x \/ null $x

--------------------------------------------------------------------------
Clauses

|- P $x \/ P $y

{P $x, P $y}

[|- P $y]

|- ~P (f $x) \/ P $x

{~P (f $x)}

|- $x = $y \/ f $y = f $x

{f $y = f $x}

|- $x = f $y \/ f $x = $y

{$x = f $y, f $x = $y}

|- s = a \/ s = b \/ h b c

{h b c}

|- a = a \/ a = b \/ h b c

{h b c}

|- ~($y <= (2 + (2 * $x + pow $x 2)) / 2) \/ ~(0 <= $x) \/ $y <= exp $x

{~($y <= (2 + (2 * $x + pow $x 2)) / 2), $y <= exp $x}

--------------------------------------------------------------------------
Syntax checking the problem sets

ok

--------------------------------------------------------------------------
Parsing TPTP problems

parsing PUZ001-1... ok
lives agatha /\ lives butler /\ lives charles /\
(!X Y. ~killed X Y \/ ~richer X Y) /\
(!X. ~hates agatha X \/ ~hates charles X) /\
(!X. ~hates X agatha \/ ~hates X butler \/ ~hates X charles) /\
hates agatha agatha /\ hates agatha charles /\
(!X Y. ~killed X Y \/ hates X Y) /\
(!X. ~hates agatha X \/ hates butler X) /\
(!X. ~lives X \/ richer X agatha \/ hates butler X) ==>
killed butler agatha \/ killed charles agatha ==> F

parsing NO_FORMULAS... ok
F

parsing SEPARATED_COMMENTS... ok
F

parsing NUMBERED_FORMULAS... ok
p ==> p

parsing DEFINED_TERMS... ok
six = $times_int 2 3 ==> six = 6

parsing SYSTEM_TERMS... ok
six = $$times_int 2 3 ==> six = 6

parsing QUOTED_TERMS... ok
p a /\ (!X. quoted predicate X) /\ quoted proposition /\
p (quoted function a) /\ p quoted constant /\
p quoted constant with escaped \'\\ characters ==> p quoted constant

parsing QUOTED_TERMS_IDENTITY... ok
p ==> p

parsing QUOTED_TERMS_DIFFERENT... ok
p 1 ==> p 1

parsing QUOTED_TERMS_SPECIAL... ok
$times_int 2 3 = 6 ==> $times_int 2 3 = 6

parsing RENAMING_VARIABLES... ok
!V_X Y. ?Z. p V_X \/ p Y ==> p Z

parsing MIXED_PROBLEM... ok
(!X Y. ~killed X Y \/ hates X Y) ==>
(?X. lives X /\ killed X agatha) /\
(lives agatha /\ lives butler /\ lives charles) /\
(!X. lives X ==> X = agatha \/ X = butler \/ X = charles) /\
(!X Y. killed X Y ==> ~richer X Y) /\
(!X. hates agatha X ==> ~hates charles X) /\
(!X. ~(X = butler) ==> hates agatha X) /\
(!X. ~richer X agatha ==> hates butler X) /\
(!X. hates agatha X ==> hates butler X) /\ (!X. ?Y. ~hates X Y) /\
~(agatha = butler) ==> killed agatha agatha

parsing BLOCK_COMMENTS... ok
(!X Y. ~killed X Y \/ hates X Y) ==>
(?X. lives X /\ killed X agatha) /\
(lives agatha /\ lives butler /\ lives charles) /\
(!X. lives X ==> X = agatha \/ X = butler \/ X = charles) /\
(!X Y. killed X Y ==> ~richer X Y) /\
(!X. hates agatha X ==> ~hates charles X) /\
(!X. ~(X = butler) ==> hates agatha X) /\
(!X. ~richer X agatha ==> hates butler X) /\
(!X. hates agatha X ==> hates butler X) /\ (!X. ?Y. ~hates X Y) /\
~(agatha = butler) ==> killed agatha agatha

--------------------------------------------------------------------------
The TPTP finite model

function add/2 -> +
function additive_identity/0 -> 0
function app/2 -> @
function append/2 -> @
function complement/1 -> complement
function cons/2 -> ::
function difference/2 -> difference
function divide/2 -> div
function empty_set/0 -> empty
function has_type/2 -> :
function identity/0 -> 1
function identity_map/1 -> project1
function intersection/2 -> intersect
function minus/1 -> ~
function multiplicative_identity/0 -> 1
function multiply/2 -> *
function n0/0 -> 0
function n1/0 -> 1
function n2/0 -> 2
function n3/0 -> 3
function n4/0 -> 4
function n5/0 -> 5
function n6/0 -> 6
function n7/0 -> 7
function n8/0 -> 8
function n9/0 -> 9
function negate/1 -> ~
function nil/0 -> nil
function null_class/0 -> empty
function singleton/1 -> singleton
function subtract/2 -> -
function successor/1 -> suc
function symmetric_difference/2 -> symmetricDifference
function union/2 -> union
function universal_class/0 -> universe
relation =/2 -> =
relation divides/2 -> divides
relation element_of_set/2 -> member
relation equal/2 -> =
relation equal_elements/2 -> =
relation equal_sets/2 -> =
relation equalish/2 -> =
relation equivalent/2 -> =
relation greater_equal/2 -> >=
relation greater_than/2 -> >
relation less/2 -> <
relation less_equal/2 -> <=
relation less_or_equal/2 -> <=
relation less_than/2 -> <
relation member/2 -> member
relation subclass/2 -> subset
relation subset/2 -> subset

