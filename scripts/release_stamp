#!/usr/bin/perl

# Copyright (c) 2007 Joe Leslie-Hurd, distributed under the MIT license

use strict;
use warnings;
use Pod::Usage;
use Getopt::Std;

use vars qw($opt_p $opt_h);

getopts('p:h');

if ($opt_h or scalar @ARGV == 0)
{
    pod2usage({-exitval => 2,
	       -verbose => 2});
}

if (!$opt_p) { die "release_stamp: you must specify the program name\n"; }

# Autoflush STDIN
$|++;

my $DATESTAMP = `date '+%Y%m%d'`; chomp $DATESTAMP;
my $TEMPFILE = "release_stamp.$$";

while (my $file = shift @ARGV) {
    open INPUT, $file or
        die "release_stamp: couldn't open $file for reading: $!\n";
    open OUTPUT, ">$TEMPFILE" or
        die "release_stamp: couldn't open $TEMPFILE for writing: $!\n";

    my $changed = 0;
    while (my $line = <INPUT>) {
        chomp $line;

        my $orig_line = $line;

        $line =~ s/(^$opt_p [[:digit:].]+|\") \(release [[:digit:]]{8}\)/$1 (release $DATESTAMP)/;

        if ($line ne $orig_line) { $changed = 1; }

        print OUTPUT "$line\n";
    }

    close OUTPUT;
    close INPUT;

    my $cmd;
    if ($changed) {
        print STDOUT "Stamped $file\n";
        $cmd = "mv $TEMPFILE $file";
    }
    else {
        $cmd = "rm $TEMPFILE";
    }
    (system ($cmd) == 0) or
        die "release_stamp: couldn't execute $cmd: $!\n";
}

__END__

=pod

=head1 NAME

release_stamp - adds the current date as a release stamp

=head1 SYNOPSIS

release_stamp [-p program-name] [-h] files-to-stamp

=head1 ARGUMENTS

The recognized flags are described below:

=over 2

=item B<-h>

Produce this documentation.

=item B<-p program>

The name of the program.

=back

=head1 DESCRIPTION

When it finds a release stamp in an input file, it replaces the date with
today's date.

=head1 BUGS

Waiting to rear their ugly heads.

=head1 AUTHORS

Joe Leslie-Hurd <joe@gilith.com>

=head1 SEE ALSO

Perl(1).

=cut
