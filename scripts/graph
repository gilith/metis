#!/usr/bin/perl

# Copyright (c) 2007 Joe Hurd, All Rights Reserved

use strict;
use warnings;
use Pod::Usage;
use Getopt::Std;
use File::Basename;

use vars qw($opt_h $opt_o $opt_t $opt_m $opt_a);

getopts('ho:t:m:a');

if ($opt_h or scalar @ARGV == 0) {
    pod2usage({-exitval => 2,
	       -verbose => 2});
}

# Autoflush STDIN
$|++;

$opt_o or die "$0: no output file specified\n";
($opt_o =~ /\.png$/) or warn "output file does not have a .png extension";

sub is_solved {
    (scalar @_ == 1) or die;
    my ($status) = @_;

    if ($status eq 'Theorem') { return 1; }
    elsif ($status eq 'Unsatisfiable') { return 1; }
    elsif ($status eq 'CounterSatisfiable') { return 0; }
    elsif ($status eq 'ResourceOut') { return 0; }
    else { die "$0: bad status '$status'\n"; }
}

sub make_points {
    (scalar @_ == 2) or die;
    my ($report, $data) = @_;

    my $name = basename $report;
    my @times = ();
    my $probs = 0;
    open INPUT, $report or
        die "couldn't open results-table $report: $!\n";
    while (my $line = <INPUT>) {
        chomp $line;
        if ($line =~ /^\# name: (.*)$/) { $name = $1; }
        next if ($line =~ /^\#/);
        $line =~ /^[^ ]+ ([^ ]+) ([^ ]+)$/
            or die "weird result line: $line\n";
        my $solved = is_solved $1;
        push @times, $2 if $solved;
        ++$probs if ($solved || $opt_a);
    }
    close INPUT;

    @times = sort { $a <=> $b; } @times;

#    print STDOUT ("times = " . (join " ", @times) . "\n");

    open OUTPUT, ">$data"
        or die "couldn't open datafile $data for writing: $!\n";
    my $curr = 0;
    my $freq = 0;
    print OUTPUT "0 0\n";
    for (my $i = 0; $i < scalar @times; ++$i) {
        ++$freq;
        my $time = 0.005 + $times[$i];
        if ($curr + 0.0025 < $time) {
            print OUTPUT "$freq $curr\n";
            $curr = $time;
        }
    }
    close OUTPUT;

    return ($name, $freq, $probs);
}

my $problems = 0;
my @graphs = ();
for (my $i = 0; 0 < scalar @ARGV; ++$i) {
    my $report = shift @ARGV;
    my $tmpfile = "/tmp/graph.$i.$$";
    my ($name, $solved, $probs) = make_points $report, $tmpfile;
    if ($probs > $problems) { $problems = $probs; }
    push @graphs, [$solved, $name, $tmpfile];
}

@graphs = sort { ${$b}[0] <=> ${$a}[0] } @graphs;

my $plotting = '
set terminal png large size 1280,960
set output "' . $opt_o . '"
set key top left Right nobox
set grid
set xlabel "Solutions in order of difficulty"
set ylabel "Time in seconds"
set logscale y 10
set xrange [0:' . $problems . ']' .
($opt_m ? "\nset yrange [0:$opt_m]" : "") .
($opt_t ? "\nset title \"$opt_t\"" : "") . '
plot ';

for (my $i = 0; $i < scalar @graphs; ++$i) {
    my $name = ${$graphs[$i]}[1];
    my $tmpfile = ${$graphs[$i]}[2];
    $plotting .= ", " unless ($i == 0);
    $plotting .= "\"$tmpfile\" title \"$name\" with linespoints";
}

my $command = "echo '$plotting' | gnuplot";

#print STDOUT "$command\n";

(system ($command) == 0) or die;

for (my $i = 0; $i < scalar @graphs; ++$i) {
    my $tmpfile = ${$graphs[$i]}[2];
    unlink $tmpfile or die "$0: couldn't unlink tmpfile $tmpfile: $!\n";
}

__END__

=pod

=head1 NAME

graph - produce a results graph

=head1 SYNOPSIS

graph [-o graph.png] [-t title] [-m maxtime] [-a] summarized-results...

=head1 ARGUMENTS

The recognized flags are described below:

=over 2

=item B<-o>

Set the output file.

=item B<-h>

Produce this documentation.

=item B<-t>

Set the graph title.

=item B<-m>

Set the maximum time.

=item B<-a>

Include all problems, not just the solved ones.

=back

=head1 DESCRIPTION

Graphs the cumulative number of problems solved against the time taken.

The result tables can be generated using the summarize script.

=head1 BUGS

Waiting to rear their ugly heads.

=head1 AUTHORS

Joe Hurd <joe@gilith.com>

=head1 SEE ALSO

Perl(1).

=cut
